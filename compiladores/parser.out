Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> DECLARACOES BLOCO
Rule 2     BLOCO -> BEGIN COMANDO LISTA_COM END
Rule 3     LISTA_COM -> <empty>
Rule 4     LISTA_COM -> ; COMANDO LISTA_COM
Rule 5     DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA
Rule 6     DEF_CONST -> <empty>
Rule 7     DEF_CONST -> CONSTANTE DEF_CONST
Rule 8     CONSTANTE -> CONST ID = CONST_VALOR ;
Rule 9     CONST_VALOR -> PALAVRA
Rule 10    CONST_VALOR -> EXP_MAT
Rule 11    DEF_TIPOS -> <empty>
Rule 12    DEF_TIPOS -> TIPO DEF_TIPOS
Rule 13    TIPO -> TYPE ID = TIPO_DADO ;
Rule 14    TIPO_DADO -> INTEGER
Rule 15    TIPO_DADO -> REAL
Rule 16    TIPO_DADO -> CHAR
Rule 17    TIPO_DADO -> BOOLEAN
Rule 18    TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO
Rule 19    TIPO_DADO -> RECORD CAMPOS END
Rule 20    TIPO_DADO -> ID
Rule 21    DEF_VAR -> <empty>
Rule 22    DEF_VAR -> VARIAVEL DEF_VAR
Rule 23    VARIAVEL -> VAR CAMPOS ;
Rule 24    CAMPOS -> CAMPO LISTA_CAMPOS
Rule 25    LISTA_CAMPOS -> <empty>
Rule 26    LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS
Rule 27    CAMPO -> ID LISTA_ID : TIPO_DADO
Rule 28    LISTA_ID -> <empty>
Rule 29    LISTA_ID -> , ID LISTA_ID
Rule 30    DEF_ROTINA -> <empty>
Rule 31    DEF_ROTINA -> ROTINA DEF_ROTINA
Rule 32    ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
Rule 33    ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA
Rule 34    PARAM_ROTINA -> <empty>
Rule 35    PARAM_ROTINA -> ( CAMPOS )
Rule 36    BLOCO_ROTINA -> DEF_VAR BLOCO
Rule 37    COMANDO -> ID NOME atribuicao
Rule 38    COMANDO -> WHILE EXP_LOGICA DO bloco_com
Rule 39    COMANDO -> IF EXP_LOGICA THEN bloco_com alternativa_else
Rule 40    COMANDO -> FOR FOR_PARAMS DO bloco_com
Rule 41    COMANDO -> WRITE CONST_VALOR
Rule 42    COMANDO -> READ ID NOME
Rule 43    bloco_com -> BLOCO
Rule 44    bloco_com -> COMANDO
Rule 45    atribuicao -> ATRIBUICAO EXP
Rule 46    alternativa_else -> ELSE bloco_com
Rule 47    alternativa_else -> <empty>
Rule 48    FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO PARAMETRO
Rule 49    EXP -> EXP_MAT
Rule 50    EXP -> EXP_LOGICA
Rule 51    EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA
Rule 52    EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA )
Rule 53    EXP_LOGICA -> PARAM_LOGICO
Rule 54    PARAM_LOGICO -> OP_COMP PARAMETRO
Rule 55    PARAM_LOGICO -> <empty>
Rule 56    EXP_MAT -> PARAMETRO OP_MAT EXP_MAT
Rule 57    EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT )
Rule 58    EXP_MAT -> PARAMETRO
Rule 59    OP_LOGICO -> AND
Rule 60    OP_LOGICO -> OR
Rule 61    OP_COMP -> >
Rule 62    OP_COMP -> <
Rule 63    OP_COMP -> COMPARACAO
Rule 64    OP_MAT -> +
Rule 65    OP_MAT -> -
Rule 66    OP_MAT -> *
Rule 67    OP_MAT -> /
Rule 68    PARAMETRO -> ID NOME
Rule 69    PARAMETRO -> NUMERO
Rule 70    PARAMETRO -> FALSE
Rule 71    PARAMETRO -> TRUE
Rule 72    NOME -> . ID NOME
Rule 73    NOME -> [ PARAMETRO ]
Rule 74    NOME -> ( LISTA_PARAM )
Rule 75    NOME -> <empty>
Rule 76    LISTA_PARAM -> PARAMETRO , LISTA_PARAM
Rule 77    LISTA_PARAM -> PARAMETRO

Terminals, with rules where they appear

(                    : 35 52 57 74
)                    : 35 52 57 74
*                    : 66
+                    : 64
,                    : 29 76
-                    : 65
.                    : 72
/                    : 67
:                    : 27 32
;                    : 4 8 13 23 26
<                    : 62
=                    : 8 13
>                    : 61
AND                  : 59
ARRAY                : 18
ATRIBUICAO           : 45 48
BEGIN                : 2
BOOLEAN              : 17
CHAR                 : 16
COMPARACAO           : 63
CONST                : 8
DO                   : 38 40
ELSE                 : 46
END                  : 2 19
FALSE                : 70
FOR                  : 40
FUNCTION             : 32
ID                   : 8 13 20 27 29 32 33 37 42 48 68 72
IF                   : 39
INTEGER              : 14
NUMERO               : 18 69
OF                   : 18
OR                   : 60
PALAVRA              : 9
PROCEDURE            : 33
READ                 : 42
REAL                 : 15
RECORD               : 19
THEN                 : 39
TO                   : 48
TRUE                 : 71
TYPE                 : 13
VAR                  : 23
WHILE                : 38
WRITE                : 41
[                    : 18 73
]                    : 18 73
error                : 

Nonterminals, with rules where they appear

BLOCO                : 1 36 43
BLOCO_ROTINA         : 32 33
CAMPO                : 24 26
CAMPOS               : 19 23 35
COMANDO              : 2 4 44
CONSTANTE            : 7
CONST_VALOR          : 8 41
DECLARACOES          : 1
DEF_CONST            : 5 7
DEF_ROTINA           : 5 31
DEF_TIPOS            : 5 12
DEF_VAR              : 5 22 36
EXP                  : 45
EXP_LOGICA           : 38 39 50 51 52
EXP_MAT              : 10 49 56 57
FOR_PARAMS           : 40
LISTA_CAMPOS         : 24 26
LISTA_COM            : 2 4
LISTA_ID             : 27 29
LISTA_PARAM          : 74 76
NOME                 : 37 42 68 72
OP_COMP              : 54
OP_LOGICO            : 51 52
OP_MAT               : 56 57
PARAMETRO            : 48 48 54 56 57 58 73 76 77
PARAM_LOGICO         : 51 52 53
PARAM_ROTINA         : 32 33
PROGRAMA             : 0
ROTINA               : 31
TIPO                 : 12
TIPO_DADO            : 13 18 27 32
VARIAVEL             : 22
alternativa_else     : 39
atribuicao           : 37
bloco_com            : 38 39 40 46

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . DECLARACOES BLOCO
    (5) DECLARACOES -> . DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA
    (6) DEF_CONST -> .
    (7) DEF_CONST -> . CONSTANTE DEF_CONST
    (8) CONSTANTE -> . CONST ID = CONST_VALOR ;

    TYPE            reduce using rule 6 (DEF_CONST -> .)
    VAR             reduce using rule 6 (DEF_CONST -> .)
    FUNCTION        reduce using rule 6 (DEF_CONST -> .)
    PROCEDURE       reduce using rule 6 (DEF_CONST -> .)
    BEGIN           reduce using rule 6 (DEF_CONST -> .)
    CONST           shift and go to state 5

    PROGRAMA                       shift and go to state 1
    DECLARACOES                    shift and go to state 2
    DEF_CONST                      shift and go to state 3
    CONSTANTE                      shift and go to state 4

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> DECLARACOES . BLOCO
    (2) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 6

state 3

    (5) DECLARACOES -> DEF_CONST . DEF_TIPOS DEF_VAR DEF_ROTINA
    (11) DEF_TIPOS -> .
    (12) DEF_TIPOS -> . TIPO DEF_TIPOS
    (13) TIPO -> . TYPE ID = TIPO_DADO ;

    VAR             reduce using rule 11 (DEF_TIPOS -> .)
    FUNCTION        reduce using rule 11 (DEF_TIPOS -> .)
    PROCEDURE       reduce using rule 11 (DEF_TIPOS -> .)
    BEGIN           reduce using rule 11 (DEF_TIPOS -> .)
    TYPE            shift and go to state 10

    DEF_TIPOS                      shift and go to state 8
    TIPO                           shift and go to state 9

state 4

    (7) DEF_CONST -> CONSTANTE . DEF_CONST
    (6) DEF_CONST -> .
    (7) DEF_CONST -> . CONSTANTE DEF_CONST
    (8) CONSTANTE -> . CONST ID = CONST_VALOR ;

    TYPE            reduce using rule 6 (DEF_CONST -> .)
    VAR             reduce using rule 6 (DEF_CONST -> .)
    FUNCTION        reduce using rule 6 (DEF_CONST -> .)
    PROCEDURE       reduce using rule 6 (DEF_CONST -> .)
    BEGIN           reduce using rule 6 (DEF_CONST -> .)
    CONST           shift and go to state 5

    CONSTANTE                      shift and go to state 4
    DEF_CONST                      shift and go to state 11

state 5

    (8) CONSTANTE -> CONST . ID = CONST_VALOR ;

    ID              shift and go to state 12


state 6

    (1) PROGRAMA -> DECLARACOES BLOCO .

    $end            reduce using rule 1 (PROGRAMA -> DECLARACOES BLOCO .)


state 7

    (2) BLOCO -> BEGIN . COMANDO LISTA_COM END
    (37) COMANDO -> . ID NOME atribuicao
    (38) COMANDO -> . WHILE EXP_LOGICA DO bloco_com
    (39) COMANDO -> . IF EXP_LOGICA THEN bloco_com alternativa_else
    (40) COMANDO -> . FOR FOR_PARAMS DO bloco_com
    (41) COMANDO -> . WRITE CONST_VALOR
    (42) COMANDO -> . READ ID NOME

    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    COMANDO                        shift and go to state 13

state 8

    (5) DECLARACOES -> DEF_CONST DEF_TIPOS . DEF_VAR DEF_ROTINA
    (21) DEF_VAR -> .
    (22) DEF_VAR -> . VARIAVEL DEF_VAR
    (23) VARIAVEL -> . VAR CAMPOS ;

    FUNCTION        reduce using rule 21 (DEF_VAR -> .)
    PROCEDURE       reduce using rule 21 (DEF_VAR -> .)
    BEGIN           reduce using rule 21 (DEF_VAR -> .)
    VAR             shift and go to state 22

    DEF_VAR                        shift and go to state 20
    VARIAVEL                       shift and go to state 21

state 9

    (12) DEF_TIPOS -> TIPO . DEF_TIPOS
    (11) DEF_TIPOS -> .
    (12) DEF_TIPOS -> . TIPO DEF_TIPOS
    (13) TIPO -> . TYPE ID = TIPO_DADO ;

    VAR             reduce using rule 11 (DEF_TIPOS -> .)
    FUNCTION        reduce using rule 11 (DEF_TIPOS -> .)
    PROCEDURE       reduce using rule 11 (DEF_TIPOS -> .)
    BEGIN           reduce using rule 11 (DEF_TIPOS -> .)
    TYPE            shift and go to state 10

    TIPO                           shift and go to state 9
    DEF_TIPOS                      shift and go to state 23

state 10

    (13) TIPO -> TYPE . ID = TIPO_DADO ;

    ID              shift and go to state 24


state 11

    (7) DEF_CONST -> CONSTANTE DEF_CONST .

    TYPE            reduce using rule 7 (DEF_CONST -> CONSTANTE DEF_CONST .)
    VAR             reduce using rule 7 (DEF_CONST -> CONSTANTE DEF_CONST .)
    FUNCTION        reduce using rule 7 (DEF_CONST -> CONSTANTE DEF_CONST .)
    PROCEDURE       reduce using rule 7 (DEF_CONST -> CONSTANTE DEF_CONST .)
    BEGIN           reduce using rule 7 (DEF_CONST -> CONSTANTE DEF_CONST .)


state 12

    (8) CONSTANTE -> CONST ID . = CONST_VALOR ;

    =               shift and go to state 25


state 13

    (2) BLOCO -> BEGIN COMANDO . LISTA_COM END
    (3) LISTA_COM -> .
    (4) LISTA_COM -> . ; COMANDO LISTA_COM

    END             reduce using rule 3 (LISTA_COM -> .)
    ;               shift and go to state 27

    LISTA_COM                      shift and go to state 26

state 14

    (37) COMANDO -> ID . NOME atribuicao
    (72) NOME -> . . ID NOME
    (73) NOME -> . [ PARAMETRO ]
    (74) NOME -> . ( LISTA_PARAM )
    (75) NOME -> .

    .               shift and go to state 29
    [               shift and go to state 30
    (               shift and go to state 31
    ATRIBUICAO      reduce using rule 75 (NOME -> .)

    NOME                           shift and go to state 28

state 15

    (38) COMANDO -> WHILE . EXP_LOGICA DO bloco_com
    (51) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (52) EXP_LOGICA -> . ( PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (53) EXP_LOGICA -> . PARAM_LOGICO
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    (               shift and go to state 34
    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    DO              reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    EXP_LOGICA                     shift and go to state 32
    PARAM_LOGICO                   shift and go to state 33
    OP_COMP                        shift and go to state 35

state 16

    (39) COMANDO -> IF . EXP_LOGICA THEN bloco_com alternativa_else
    (51) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (52) EXP_LOGICA -> . ( PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (53) EXP_LOGICA -> . PARAM_LOGICO
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    (               shift and go to state 34
    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    THEN            reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    EXP_LOGICA                     shift and go to state 39
    PARAM_LOGICO                   shift and go to state 33
    OP_COMP                        shift and go to state 35

state 17

    (40) COMANDO -> FOR . FOR_PARAMS DO bloco_com
    (48) FOR_PARAMS -> . ID ATRIBUICAO PARAMETRO TO PARAMETRO

    ID              shift and go to state 41

    FOR_PARAMS                     shift and go to state 40

state 18

    (41) COMANDO -> WRITE . CONST_VALOR
    (9) CONST_VALOR -> . PALAVRA
    (10) CONST_VALOR -> . EXP_MAT
    (56) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (57) EXP_MAT -> . ( PARAMETRO OP_MAT EXP_MAT )
    (58) EXP_MAT -> . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    PALAVRA         shift and go to state 43
    (               shift and go to state 46
    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    CONST_VALOR                    shift and go to state 42
    EXP_MAT                        shift and go to state 44
    PARAMETRO                      shift and go to state 45

state 19

    (42) COMANDO -> READ . ID NOME

    ID              shift and go to state 51


state 20

    (5) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR . DEF_ROTINA
    (30) DEF_ROTINA -> .
    (31) DEF_ROTINA -> . ROTINA DEF_ROTINA
    (32) ROTINA -> . FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
    (33) ROTINA -> . PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA

    BEGIN           reduce using rule 30 (DEF_ROTINA -> .)
    FUNCTION        shift and go to state 54
    PROCEDURE       shift and go to state 55

    DEF_ROTINA                     shift and go to state 52
    ROTINA                         shift and go to state 53

state 21

    (22) DEF_VAR -> VARIAVEL . DEF_VAR
    (21) DEF_VAR -> .
    (22) DEF_VAR -> . VARIAVEL DEF_VAR
    (23) VARIAVEL -> . VAR CAMPOS ;

    FUNCTION        reduce using rule 21 (DEF_VAR -> .)
    PROCEDURE       reduce using rule 21 (DEF_VAR -> .)
    BEGIN           reduce using rule 21 (DEF_VAR -> .)
    VAR             shift and go to state 22

    VARIAVEL                       shift and go to state 21
    DEF_VAR                        shift and go to state 56

state 22

    (23) VARIAVEL -> VAR . CAMPOS ;
    (24) CAMPOS -> . CAMPO LISTA_CAMPOS
    (27) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 59

    CAMPOS                         shift and go to state 57
    CAMPO                          shift and go to state 58

state 23

    (12) DEF_TIPOS -> TIPO DEF_TIPOS .

    VAR             reduce using rule 12 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    FUNCTION        reduce using rule 12 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    PROCEDURE       reduce using rule 12 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    BEGIN           reduce using rule 12 (DEF_TIPOS -> TIPO DEF_TIPOS .)


state 24

    (13) TIPO -> TYPE ID . = TIPO_DADO ;

    =               shift and go to state 60


state 25

    (8) CONSTANTE -> CONST ID = . CONST_VALOR ;
    (9) CONST_VALOR -> . PALAVRA
    (10) CONST_VALOR -> . EXP_MAT
    (56) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (57) EXP_MAT -> . ( PARAMETRO OP_MAT EXP_MAT )
    (58) EXP_MAT -> . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    PALAVRA         shift and go to state 43
    (               shift and go to state 46
    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    CONST_VALOR                    shift and go to state 61
    EXP_MAT                        shift and go to state 44
    PARAMETRO                      shift and go to state 45

state 26

    (2) BLOCO -> BEGIN COMANDO LISTA_COM . END

    END             shift and go to state 62


state 27

    (4) LISTA_COM -> ; . COMANDO LISTA_COM
    (37) COMANDO -> . ID NOME atribuicao
    (38) COMANDO -> . WHILE EXP_LOGICA DO bloco_com
    (39) COMANDO -> . IF EXP_LOGICA THEN bloco_com alternativa_else
    (40) COMANDO -> . FOR FOR_PARAMS DO bloco_com
    (41) COMANDO -> . WRITE CONST_VALOR
    (42) COMANDO -> . READ ID NOME

    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    COMANDO                        shift and go to state 63

state 28

    (37) COMANDO -> ID NOME . atribuicao
    (45) atribuicao -> . ATRIBUICAO EXP

    ATRIBUICAO      shift and go to state 65

    atribuicao                     shift and go to state 64

state 29

    (72) NOME -> . . ID NOME

    ID              shift and go to state 66


state 30

    (73) NOME -> [ . PARAMETRO ]
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 67

state 31

    (74) NOME -> ( . LISTA_PARAM )
    (76) LISTA_PARAM -> . PARAMETRO , LISTA_PARAM
    (77) LISTA_PARAM -> . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    LISTA_PARAM                    shift and go to state 68
    PARAMETRO                      shift and go to state 69

state 32

    (38) COMANDO -> WHILE EXP_LOGICA . DO bloco_com

    DO              shift and go to state 70


state 33

    (51) EXP_LOGICA -> PARAM_LOGICO . OP_LOGICO EXP_LOGICA
    (53) EXP_LOGICA -> PARAM_LOGICO .
    (59) OP_LOGICO -> . AND
    (60) OP_LOGICO -> . OR

    DO              reduce using rule 53 (EXP_LOGICA -> PARAM_LOGICO .)
    THEN            reduce using rule 53 (EXP_LOGICA -> PARAM_LOGICO .)
    ;               reduce using rule 53 (EXP_LOGICA -> PARAM_LOGICO .)
    END             reduce using rule 53 (EXP_LOGICA -> PARAM_LOGICO .)
    ELSE            reduce using rule 53 (EXP_LOGICA -> PARAM_LOGICO .)
    )               reduce using rule 53 (EXP_LOGICA -> PARAM_LOGICO .)
    AND             shift and go to state 72
    OR              shift and go to state 73

    OP_LOGICO                      shift and go to state 71

state 34

    (52) EXP_LOGICA -> ( . PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    PARAM_LOGICO                   shift and go to state 74
    OP_COMP                        shift and go to state 35

state 35

    (54) PARAM_LOGICO -> OP_COMP . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 75

state 36

    (61) OP_COMP -> > .

    ID              reduce using rule 61 (OP_COMP -> > .)
    NUMERO          reduce using rule 61 (OP_COMP -> > .)
    FALSE           reduce using rule 61 (OP_COMP -> > .)
    TRUE            reduce using rule 61 (OP_COMP -> > .)


state 37

    (62) OP_COMP -> < .

    ID              reduce using rule 62 (OP_COMP -> < .)
    NUMERO          reduce using rule 62 (OP_COMP -> < .)
    FALSE           reduce using rule 62 (OP_COMP -> < .)
    TRUE            reduce using rule 62 (OP_COMP -> < .)


state 38

    (63) OP_COMP -> COMPARACAO .

    ID              reduce using rule 63 (OP_COMP -> COMPARACAO .)
    NUMERO          reduce using rule 63 (OP_COMP -> COMPARACAO .)
    FALSE           reduce using rule 63 (OP_COMP -> COMPARACAO .)
    TRUE            reduce using rule 63 (OP_COMP -> COMPARACAO .)


state 39

    (39) COMANDO -> IF EXP_LOGICA . THEN bloco_com alternativa_else

    THEN            shift and go to state 76


state 40

    (40) COMANDO -> FOR FOR_PARAMS . DO bloco_com

    DO              shift and go to state 77


state 41

    (48) FOR_PARAMS -> ID . ATRIBUICAO PARAMETRO TO PARAMETRO

    ATRIBUICAO      shift and go to state 78


state 42

    (41) COMANDO -> WRITE CONST_VALOR .

    ;               reduce using rule 41 (COMANDO -> WRITE CONST_VALOR .)
    END             reduce using rule 41 (COMANDO -> WRITE CONST_VALOR .)
    ELSE            reduce using rule 41 (COMANDO -> WRITE CONST_VALOR .)


state 43

    (9) CONST_VALOR -> PALAVRA .

    ;               reduce using rule 9 (CONST_VALOR -> PALAVRA .)
    END             reduce using rule 9 (CONST_VALOR -> PALAVRA .)
    ELSE            reduce using rule 9 (CONST_VALOR -> PALAVRA .)


state 44

    (10) CONST_VALOR -> EXP_MAT .

    ;               reduce using rule 10 (CONST_VALOR -> EXP_MAT .)
    END             reduce using rule 10 (CONST_VALOR -> EXP_MAT .)
    ELSE            reduce using rule 10 (CONST_VALOR -> EXP_MAT .)


state 45

    (56) EXP_MAT -> PARAMETRO . OP_MAT EXP_MAT
    (58) EXP_MAT -> PARAMETRO .
    (64) OP_MAT -> . +
    (65) OP_MAT -> . -
    (66) OP_MAT -> . *
    (67) OP_MAT -> . /

    ;               reduce using rule 58 (EXP_MAT -> PARAMETRO .)
    END             reduce using rule 58 (EXP_MAT -> PARAMETRO .)
    ELSE            reduce using rule 58 (EXP_MAT -> PARAMETRO .)
    )               reduce using rule 58 (EXP_MAT -> PARAMETRO .)
    +               shift and go to state 80
    -               shift and go to state 81
    *               shift and go to state 82
    /               shift and go to state 83

    OP_MAT                         shift and go to state 79

state 46

    (57) EXP_MAT -> ( . PARAMETRO OP_MAT EXP_MAT )
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 84

state 47

    (68) PARAMETRO -> ID . NOME
    (72) NOME -> . . ID NOME
    (73) NOME -> . [ PARAMETRO ]
    (74) NOME -> . ( LISTA_PARAM )
    (75) NOME -> .

    .               shift and go to state 29
    [               shift and go to state 30
    (               shift and go to state 31
    +               reduce using rule 75 (NOME -> .)
    -               reduce using rule 75 (NOME -> .)
    *               reduce using rule 75 (NOME -> .)
    /               reduce using rule 75 (NOME -> .)
    ;               reduce using rule 75 (NOME -> .)
    END             reduce using rule 75 (NOME -> .)
    ELSE            reduce using rule 75 (NOME -> .)
    ]               reduce using rule 75 (NOME -> .)
    ,               reduce using rule 75 (NOME -> .)
    )               reduce using rule 75 (NOME -> .)
    AND             reduce using rule 75 (NOME -> .)
    OR              reduce using rule 75 (NOME -> .)
    DO              reduce using rule 75 (NOME -> .)
    THEN            reduce using rule 75 (NOME -> .)
    TO              reduce using rule 75 (NOME -> .)

    NOME                           shift and go to state 85

state 48

    (69) PARAMETRO -> NUMERO .

    +               reduce using rule 69 (PARAMETRO -> NUMERO .)
    -               reduce using rule 69 (PARAMETRO -> NUMERO .)
    *               reduce using rule 69 (PARAMETRO -> NUMERO .)
    /               reduce using rule 69 (PARAMETRO -> NUMERO .)
    ;               reduce using rule 69 (PARAMETRO -> NUMERO .)
    END             reduce using rule 69 (PARAMETRO -> NUMERO .)
    ELSE            reduce using rule 69 (PARAMETRO -> NUMERO .)
    ]               reduce using rule 69 (PARAMETRO -> NUMERO .)
    ,               reduce using rule 69 (PARAMETRO -> NUMERO .)
    )               reduce using rule 69 (PARAMETRO -> NUMERO .)
    AND             reduce using rule 69 (PARAMETRO -> NUMERO .)
    OR              reduce using rule 69 (PARAMETRO -> NUMERO .)
    DO              reduce using rule 69 (PARAMETRO -> NUMERO .)
    THEN            reduce using rule 69 (PARAMETRO -> NUMERO .)
    TO              reduce using rule 69 (PARAMETRO -> NUMERO .)


state 49

    (70) PARAMETRO -> FALSE .

    +               reduce using rule 70 (PARAMETRO -> FALSE .)
    -               reduce using rule 70 (PARAMETRO -> FALSE .)
    *               reduce using rule 70 (PARAMETRO -> FALSE .)
    /               reduce using rule 70 (PARAMETRO -> FALSE .)
    ;               reduce using rule 70 (PARAMETRO -> FALSE .)
    END             reduce using rule 70 (PARAMETRO -> FALSE .)
    ELSE            reduce using rule 70 (PARAMETRO -> FALSE .)
    ]               reduce using rule 70 (PARAMETRO -> FALSE .)
    ,               reduce using rule 70 (PARAMETRO -> FALSE .)
    )               reduce using rule 70 (PARAMETRO -> FALSE .)
    AND             reduce using rule 70 (PARAMETRO -> FALSE .)
    OR              reduce using rule 70 (PARAMETRO -> FALSE .)
    DO              reduce using rule 70 (PARAMETRO -> FALSE .)
    THEN            reduce using rule 70 (PARAMETRO -> FALSE .)
    TO              reduce using rule 70 (PARAMETRO -> FALSE .)


state 50

    (71) PARAMETRO -> TRUE .

    +               reduce using rule 71 (PARAMETRO -> TRUE .)
    -               reduce using rule 71 (PARAMETRO -> TRUE .)
    *               reduce using rule 71 (PARAMETRO -> TRUE .)
    /               reduce using rule 71 (PARAMETRO -> TRUE .)
    ;               reduce using rule 71 (PARAMETRO -> TRUE .)
    END             reduce using rule 71 (PARAMETRO -> TRUE .)
    ELSE            reduce using rule 71 (PARAMETRO -> TRUE .)
    ]               reduce using rule 71 (PARAMETRO -> TRUE .)
    ,               reduce using rule 71 (PARAMETRO -> TRUE .)
    )               reduce using rule 71 (PARAMETRO -> TRUE .)
    AND             reduce using rule 71 (PARAMETRO -> TRUE .)
    OR              reduce using rule 71 (PARAMETRO -> TRUE .)
    DO              reduce using rule 71 (PARAMETRO -> TRUE .)
    THEN            reduce using rule 71 (PARAMETRO -> TRUE .)
    TO              reduce using rule 71 (PARAMETRO -> TRUE .)


state 51

    (42) COMANDO -> READ ID . NOME
    (72) NOME -> . . ID NOME
    (73) NOME -> . [ PARAMETRO ]
    (74) NOME -> . ( LISTA_PARAM )
    (75) NOME -> .

    .               shift and go to state 29
    [               shift and go to state 30
    (               shift and go to state 31
    ;               reduce using rule 75 (NOME -> .)
    END             reduce using rule 75 (NOME -> .)
    ELSE            reduce using rule 75 (NOME -> .)

    NOME                           shift and go to state 86

state 52

    (5) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA .

    BEGIN           reduce using rule 5 (DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_ROTINA .)


state 53

    (31) DEF_ROTINA -> ROTINA . DEF_ROTINA
    (30) DEF_ROTINA -> .
    (31) DEF_ROTINA -> . ROTINA DEF_ROTINA
    (32) ROTINA -> . FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
    (33) ROTINA -> . PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA

    BEGIN           reduce using rule 30 (DEF_ROTINA -> .)
    FUNCTION        shift and go to state 54
    PROCEDURE       shift and go to state 55

    ROTINA                         shift and go to state 53
    DEF_ROTINA                     shift and go to state 87

state 54

    (32) ROTINA -> FUNCTION . ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA

    ID              shift and go to state 88


state 55

    (33) ROTINA -> PROCEDURE . ID PARAM_ROTINA BLOCO_ROTINA

    ID              shift and go to state 89


state 56

    (22) DEF_VAR -> VARIAVEL DEF_VAR .

    FUNCTION        reduce using rule 22 (DEF_VAR -> VARIAVEL DEF_VAR .)
    PROCEDURE       reduce using rule 22 (DEF_VAR -> VARIAVEL DEF_VAR .)
    BEGIN           reduce using rule 22 (DEF_VAR -> VARIAVEL DEF_VAR .)


state 57

    (23) VARIAVEL -> VAR CAMPOS . ;

    ;               shift and go to state 90


state 58

    (24) CAMPOS -> CAMPO . LISTA_CAMPOS
    (25) LISTA_CAMPOS -> .
    (26) LISTA_CAMPOS -> . ; CAMPO LISTA_CAMPOS

  ! shift/reduce conflict for ; resolved as shift
    END             reduce using rule 25 (LISTA_CAMPOS -> .)
    )               reduce using rule 25 (LISTA_CAMPOS -> .)
    ;               shift and go to state 92

  ! ;               [ reduce using rule 25 (LISTA_CAMPOS -> .) ]

    LISTA_CAMPOS                   shift and go to state 91

state 59

    (27) CAMPO -> ID . LISTA_ID : TIPO_DADO
    (28) LISTA_ID -> .
    (29) LISTA_ID -> . , ID LISTA_ID

    :               reduce using rule 28 (LISTA_ID -> .)
    ,               shift and go to state 94

    LISTA_ID                       shift and go to state 93

state 60

    (13) TIPO -> TYPE ID = . TIPO_DADO ;
    (14) TIPO_DADO -> . INTEGER
    (15) TIPO_DADO -> . REAL
    (16) TIPO_DADO -> . CHAR
    (17) TIPO_DADO -> . BOOLEAN
    (18) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (19) TIPO_DADO -> . RECORD CAMPOS END
    (20) TIPO_DADO -> . ID

    INTEGER         shift and go to state 97
    REAL            shift and go to state 98
    CHAR            shift and go to state 99
    BOOLEAN         shift and go to state 100
    ARRAY           shift and go to state 101
    RECORD          shift and go to state 102
    ID              shift and go to state 95

    TIPO_DADO                      shift and go to state 96

state 61

    (8) CONSTANTE -> CONST ID = CONST_VALOR . ;

    ;               shift and go to state 103


state 62

    (2) BLOCO -> BEGIN COMANDO LISTA_COM END .

    $end            reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    ;               reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    END             reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    ELSE            reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    FUNCTION        reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    PROCEDURE       reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    BEGIN           reduce using rule 2 (BLOCO -> BEGIN COMANDO LISTA_COM END .)


state 63

    (4) LISTA_COM -> ; COMANDO . LISTA_COM
    (3) LISTA_COM -> .
    (4) LISTA_COM -> . ; COMANDO LISTA_COM

    END             reduce using rule 3 (LISTA_COM -> .)
    ;               shift and go to state 27

    LISTA_COM                      shift and go to state 104

state 64

    (37) COMANDO -> ID NOME atribuicao .

    ;               reduce using rule 37 (COMANDO -> ID NOME atribuicao .)
    END             reduce using rule 37 (COMANDO -> ID NOME atribuicao .)
    ELSE            reduce using rule 37 (COMANDO -> ID NOME atribuicao .)


state 65

    (45) atribuicao -> ATRIBUICAO . EXP
    (49) EXP -> . EXP_MAT
    (50) EXP -> . EXP_LOGICA
    (56) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (57) EXP_MAT -> . ( PARAMETRO OP_MAT EXP_MAT )
    (58) EXP_MAT -> . PARAMETRO
    (51) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (52) EXP_LOGICA -> . ( PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (53) EXP_LOGICA -> . PARAM_LOGICO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    (               shift and go to state 108
    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    ;               reduce using rule 55 (PARAM_LOGICO -> .)
    END             reduce using rule 55 (PARAM_LOGICO -> .)
    ELSE            reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    EXP                            shift and go to state 105
    EXP_MAT                        shift and go to state 106
    EXP_LOGICA                     shift and go to state 107
    PARAMETRO                      shift and go to state 45
    PARAM_LOGICO                   shift and go to state 33
    OP_COMP                        shift and go to state 35

state 66

    (72) NOME -> . ID . NOME
    (72) NOME -> . . ID NOME
    (73) NOME -> . [ PARAMETRO ]
    (74) NOME -> . ( LISTA_PARAM )
    (75) NOME -> .

    .               shift and go to state 29
    [               shift and go to state 30
    (               shift and go to state 31
    ATRIBUICAO      reduce using rule 75 (NOME -> .)
    +               reduce using rule 75 (NOME -> .)
    -               reduce using rule 75 (NOME -> .)
    *               reduce using rule 75 (NOME -> .)
    /               reduce using rule 75 (NOME -> .)
    ;               reduce using rule 75 (NOME -> .)
    END             reduce using rule 75 (NOME -> .)
    ELSE            reduce using rule 75 (NOME -> .)
    ]               reduce using rule 75 (NOME -> .)
    ,               reduce using rule 75 (NOME -> .)
    )               reduce using rule 75 (NOME -> .)
    AND             reduce using rule 75 (NOME -> .)
    OR              reduce using rule 75 (NOME -> .)
    DO              reduce using rule 75 (NOME -> .)
    THEN            reduce using rule 75 (NOME -> .)
    TO              reduce using rule 75 (NOME -> .)

    NOME                           shift and go to state 109

state 67

    (73) NOME -> [ PARAMETRO . ]

    ]               shift and go to state 110


state 68

    (74) NOME -> ( LISTA_PARAM . )

    )               shift and go to state 111


state 69

    (76) LISTA_PARAM -> PARAMETRO . , LISTA_PARAM
    (77) LISTA_PARAM -> PARAMETRO .

    ,               shift and go to state 112
    )               reduce using rule 77 (LISTA_PARAM -> PARAMETRO .)


state 70

    (38) COMANDO -> WHILE EXP_LOGICA DO . bloco_com
    (43) bloco_com -> . BLOCO
    (44) bloco_com -> . COMANDO
    (2) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (37) COMANDO -> . ID NOME atribuicao
    (38) COMANDO -> . WHILE EXP_LOGICA DO bloco_com
    (39) COMANDO -> . IF EXP_LOGICA THEN bloco_com alternativa_else
    (40) COMANDO -> . FOR FOR_PARAMS DO bloco_com
    (41) COMANDO -> . WRITE CONST_VALOR
    (42) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 7
    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    bloco_com                      shift and go to state 113
    BLOCO                          shift and go to state 114
    COMANDO                        shift and go to state 115

state 71

    (51) EXP_LOGICA -> PARAM_LOGICO OP_LOGICO . EXP_LOGICA
    (51) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (52) EXP_LOGICA -> . ( PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (53) EXP_LOGICA -> . PARAM_LOGICO
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    (               shift and go to state 34
    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    DO              reduce using rule 55 (PARAM_LOGICO -> .)
    THEN            reduce using rule 55 (PARAM_LOGICO -> .)
    ;               reduce using rule 55 (PARAM_LOGICO -> .)
    END             reduce using rule 55 (PARAM_LOGICO -> .)
    ELSE            reduce using rule 55 (PARAM_LOGICO -> .)
    )               reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    PARAM_LOGICO                   shift and go to state 33
    EXP_LOGICA                     shift and go to state 116
    OP_COMP                        shift and go to state 35

state 72

    (59) OP_LOGICO -> AND .

    (               reduce using rule 59 (OP_LOGICO -> AND .)
    >               reduce using rule 59 (OP_LOGICO -> AND .)
    <               reduce using rule 59 (OP_LOGICO -> AND .)
    COMPARACAO      reduce using rule 59 (OP_LOGICO -> AND .)
    AND             reduce using rule 59 (OP_LOGICO -> AND .)
    OR              reduce using rule 59 (OP_LOGICO -> AND .)
    DO              reduce using rule 59 (OP_LOGICO -> AND .)
    THEN            reduce using rule 59 (OP_LOGICO -> AND .)
    ;               reduce using rule 59 (OP_LOGICO -> AND .)
    END             reduce using rule 59 (OP_LOGICO -> AND .)
    ELSE            reduce using rule 59 (OP_LOGICO -> AND .)
    )               reduce using rule 59 (OP_LOGICO -> AND .)


state 73

    (60) OP_LOGICO -> OR .

    (               reduce using rule 60 (OP_LOGICO -> OR .)
    >               reduce using rule 60 (OP_LOGICO -> OR .)
    <               reduce using rule 60 (OP_LOGICO -> OR .)
    COMPARACAO      reduce using rule 60 (OP_LOGICO -> OR .)
    AND             reduce using rule 60 (OP_LOGICO -> OR .)
    OR              reduce using rule 60 (OP_LOGICO -> OR .)
    DO              reduce using rule 60 (OP_LOGICO -> OR .)
    THEN            reduce using rule 60 (OP_LOGICO -> OR .)
    ;               reduce using rule 60 (OP_LOGICO -> OR .)
    END             reduce using rule 60 (OP_LOGICO -> OR .)
    ELSE            reduce using rule 60 (OP_LOGICO -> OR .)
    )               reduce using rule 60 (OP_LOGICO -> OR .)


state 74

    (52) EXP_LOGICA -> ( PARAM_LOGICO . OP_LOGICO EXP_LOGICA )
    (59) OP_LOGICO -> . AND
    (60) OP_LOGICO -> . OR

    AND             shift and go to state 72
    OR              shift and go to state 73

    OP_LOGICO                      shift and go to state 117

state 75

    (54) PARAM_LOGICO -> OP_COMP PARAMETRO .

    AND             reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    OR              reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    DO              reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    THEN            reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    ;               reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    END             reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    ELSE            reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)
    )               reduce using rule 54 (PARAM_LOGICO -> OP_COMP PARAMETRO .)


state 76

    (39) COMANDO -> IF EXP_LOGICA THEN . bloco_com alternativa_else
    (43) bloco_com -> . BLOCO
    (44) bloco_com -> . COMANDO
    (2) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (37) COMANDO -> . ID NOME atribuicao
    (38) COMANDO -> . WHILE EXP_LOGICA DO bloco_com
    (39) COMANDO -> . IF EXP_LOGICA THEN bloco_com alternativa_else
    (40) COMANDO -> . FOR FOR_PARAMS DO bloco_com
    (41) COMANDO -> . WRITE CONST_VALOR
    (42) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 7
    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    bloco_com                      shift and go to state 118
    BLOCO                          shift and go to state 114
    COMANDO                        shift and go to state 115

state 77

    (40) COMANDO -> FOR FOR_PARAMS DO . bloco_com
    (43) bloco_com -> . BLOCO
    (44) bloco_com -> . COMANDO
    (2) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (37) COMANDO -> . ID NOME atribuicao
    (38) COMANDO -> . WHILE EXP_LOGICA DO bloco_com
    (39) COMANDO -> . IF EXP_LOGICA THEN bloco_com alternativa_else
    (40) COMANDO -> . FOR FOR_PARAMS DO bloco_com
    (41) COMANDO -> . WRITE CONST_VALOR
    (42) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 7
    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    bloco_com                      shift and go to state 119
    BLOCO                          shift and go to state 114
    COMANDO                        shift and go to state 115

state 78

    (48) FOR_PARAMS -> ID ATRIBUICAO . PARAMETRO TO PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 120

state 79

    (56) EXP_MAT -> PARAMETRO OP_MAT . EXP_MAT
    (56) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (57) EXP_MAT -> . ( PARAMETRO OP_MAT EXP_MAT )
    (58) EXP_MAT -> . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    (               shift and go to state 46
    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 45
    EXP_MAT                        shift and go to state 121

state 80

    (64) OP_MAT -> + .

    (               reduce using rule 64 (OP_MAT -> + .)
    ID              reduce using rule 64 (OP_MAT -> + .)
    NUMERO          reduce using rule 64 (OP_MAT -> + .)
    FALSE           reduce using rule 64 (OP_MAT -> + .)
    TRUE            reduce using rule 64 (OP_MAT -> + .)


state 81

    (65) OP_MAT -> - .

    (               reduce using rule 65 (OP_MAT -> - .)
    ID              reduce using rule 65 (OP_MAT -> - .)
    NUMERO          reduce using rule 65 (OP_MAT -> - .)
    FALSE           reduce using rule 65 (OP_MAT -> - .)
    TRUE            reduce using rule 65 (OP_MAT -> - .)


state 82

    (66) OP_MAT -> * .

    (               reduce using rule 66 (OP_MAT -> * .)
    ID              reduce using rule 66 (OP_MAT -> * .)
    NUMERO          reduce using rule 66 (OP_MAT -> * .)
    FALSE           reduce using rule 66 (OP_MAT -> * .)
    TRUE            reduce using rule 66 (OP_MAT -> * .)


state 83

    (67) OP_MAT -> / .

    (               reduce using rule 67 (OP_MAT -> / .)
    ID              reduce using rule 67 (OP_MAT -> / .)
    NUMERO          reduce using rule 67 (OP_MAT -> / .)
    FALSE           reduce using rule 67 (OP_MAT -> / .)
    TRUE            reduce using rule 67 (OP_MAT -> / .)


state 84

    (57) EXP_MAT -> ( PARAMETRO . OP_MAT EXP_MAT )
    (64) OP_MAT -> . +
    (65) OP_MAT -> . -
    (66) OP_MAT -> . *
    (67) OP_MAT -> . /

    +               shift and go to state 80
    -               shift and go to state 81
    *               shift and go to state 82
    /               shift and go to state 83

    OP_MAT                         shift and go to state 122

state 85

    (68) PARAMETRO -> ID NOME .

    +               reduce using rule 68 (PARAMETRO -> ID NOME .)
    -               reduce using rule 68 (PARAMETRO -> ID NOME .)
    *               reduce using rule 68 (PARAMETRO -> ID NOME .)
    /               reduce using rule 68 (PARAMETRO -> ID NOME .)
    ;               reduce using rule 68 (PARAMETRO -> ID NOME .)
    END             reduce using rule 68 (PARAMETRO -> ID NOME .)
    ELSE            reduce using rule 68 (PARAMETRO -> ID NOME .)
    ]               reduce using rule 68 (PARAMETRO -> ID NOME .)
    ,               reduce using rule 68 (PARAMETRO -> ID NOME .)
    )               reduce using rule 68 (PARAMETRO -> ID NOME .)
    AND             reduce using rule 68 (PARAMETRO -> ID NOME .)
    OR              reduce using rule 68 (PARAMETRO -> ID NOME .)
    DO              reduce using rule 68 (PARAMETRO -> ID NOME .)
    THEN            reduce using rule 68 (PARAMETRO -> ID NOME .)
    TO              reduce using rule 68 (PARAMETRO -> ID NOME .)


state 86

    (42) COMANDO -> READ ID NOME .

    ;               reduce using rule 42 (COMANDO -> READ ID NOME .)
    END             reduce using rule 42 (COMANDO -> READ ID NOME .)
    ELSE            reduce using rule 42 (COMANDO -> READ ID NOME .)


state 87

    (31) DEF_ROTINA -> ROTINA DEF_ROTINA .

    BEGIN           reduce using rule 31 (DEF_ROTINA -> ROTINA DEF_ROTINA .)


state 88

    (32) ROTINA -> FUNCTION ID . PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA
    (34) PARAM_ROTINA -> .
    (35) PARAM_ROTINA -> . ( CAMPOS )

    :               reduce using rule 34 (PARAM_ROTINA -> .)
    (               shift and go to state 124

    PARAM_ROTINA                   shift and go to state 123

state 89

    (33) ROTINA -> PROCEDURE ID . PARAM_ROTINA BLOCO_ROTINA
    (34) PARAM_ROTINA -> .
    (35) PARAM_ROTINA -> . ( CAMPOS )

    VAR             reduce using rule 34 (PARAM_ROTINA -> .)
    BEGIN           reduce using rule 34 (PARAM_ROTINA -> .)
    (               shift and go to state 124

    PARAM_ROTINA                   shift and go to state 125

state 90

    (23) VARIAVEL -> VAR CAMPOS ; .

    VAR             reduce using rule 23 (VARIAVEL -> VAR CAMPOS ; .)
    FUNCTION        reduce using rule 23 (VARIAVEL -> VAR CAMPOS ; .)
    PROCEDURE       reduce using rule 23 (VARIAVEL -> VAR CAMPOS ; .)
    BEGIN           reduce using rule 23 (VARIAVEL -> VAR CAMPOS ; .)


state 91

    (24) CAMPOS -> CAMPO LISTA_CAMPOS .

    ;               reduce using rule 24 (CAMPOS -> CAMPO LISTA_CAMPOS .)
    END             reduce using rule 24 (CAMPOS -> CAMPO LISTA_CAMPOS .)
    )               reduce using rule 24 (CAMPOS -> CAMPO LISTA_CAMPOS .)


state 92

    (26) LISTA_CAMPOS -> ; . CAMPO LISTA_CAMPOS
    (27) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 59

    CAMPO                          shift and go to state 126

state 93

    (27) CAMPO -> ID LISTA_ID . : TIPO_DADO

    :               shift and go to state 127


state 94

    (29) LISTA_ID -> , . ID LISTA_ID

    ID              shift and go to state 128


state 95

    (20) TIPO_DADO -> ID .

    ;               reduce using rule 20 (TIPO_DADO -> ID .)
    END             reduce using rule 20 (TIPO_DADO -> ID .)
    )               reduce using rule 20 (TIPO_DADO -> ID .)
    VAR             reduce using rule 20 (TIPO_DADO -> ID .)
    BEGIN           reduce using rule 20 (TIPO_DADO -> ID .)


state 96

    (13) TIPO -> TYPE ID = TIPO_DADO . ;

    ;               shift and go to state 129


state 97

    (14) TIPO_DADO -> INTEGER .

    ;               reduce using rule 14 (TIPO_DADO -> INTEGER .)
    END             reduce using rule 14 (TIPO_DADO -> INTEGER .)
    )               reduce using rule 14 (TIPO_DADO -> INTEGER .)
    VAR             reduce using rule 14 (TIPO_DADO -> INTEGER .)
    BEGIN           reduce using rule 14 (TIPO_DADO -> INTEGER .)


state 98

    (15) TIPO_DADO -> REAL .

    ;               reduce using rule 15 (TIPO_DADO -> REAL .)
    END             reduce using rule 15 (TIPO_DADO -> REAL .)
    )               reduce using rule 15 (TIPO_DADO -> REAL .)
    VAR             reduce using rule 15 (TIPO_DADO -> REAL .)
    BEGIN           reduce using rule 15 (TIPO_DADO -> REAL .)


state 99

    (16) TIPO_DADO -> CHAR .

    ;               reduce using rule 16 (TIPO_DADO -> CHAR .)
    END             reduce using rule 16 (TIPO_DADO -> CHAR .)
    )               reduce using rule 16 (TIPO_DADO -> CHAR .)
    VAR             reduce using rule 16 (TIPO_DADO -> CHAR .)
    BEGIN           reduce using rule 16 (TIPO_DADO -> CHAR .)


state 100

    (17) TIPO_DADO -> BOOLEAN .

    ;               reduce using rule 17 (TIPO_DADO -> BOOLEAN .)
    END             reduce using rule 17 (TIPO_DADO -> BOOLEAN .)
    )               reduce using rule 17 (TIPO_DADO -> BOOLEAN .)
    VAR             reduce using rule 17 (TIPO_DADO -> BOOLEAN .)
    BEGIN           reduce using rule 17 (TIPO_DADO -> BOOLEAN .)


state 101

    (18) TIPO_DADO -> ARRAY . [ NUMERO ] OF TIPO_DADO

    [               shift and go to state 130


state 102

    (19) TIPO_DADO -> RECORD . CAMPOS END
    (24) CAMPOS -> . CAMPO LISTA_CAMPOS
    (27) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 59

    CAMPOS                         shift and go to state 131
    CAMPO                          shift and go to state 58

state 103

    (8) CONSTANTE -> CONST ID = CONST_VALOR ; .

    CONST           reduce using rule 8 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    TYPE            reduce using rule 8 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    VAR             reduce using rule 8 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    FUNCTION        reduce using rule 8 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    PROCEDURE       reduce using rule 8 (CONSTANTE -> CONST ID = CONST_VALOR ; .)
    BEGIN           reduce using rule 8 (CONSTANTE -> CONST ID = CONST_VALOR ; .)


state 104

    (4) LISTA_COM -> ; COMANDO LISTA_COM .

    END             reduce using rule 4 (LISTA_COM -> ; COMANDO LISTA_COM .)


state 105

    (45) atribuicao -> ATRIBUICAO EXP .

    ;               reduce using rule 45 (atribuicao -> ATRIBUICAO EXP .)
    END             reduce using rule 45 (atribuicao -> ATRIBUICAO EXP .)
    ELSE            reduce using rule 45 (atribuicao -> ATRIBUICAO EXP .)


state 106

    (49) EXP -> EXP_MAT .

    ;               reduce using rule 49 (EXP -> EXP_MAT .)
    END             reduce using rule 49 (EXP -> EXP_MAT .)
    ELSE            reduce using rule 49 (EXP -> EXP_MAT .)


state 107

    (50) EXP -> EXP_LOGICA .

    ;               reduce using rule 50 (EXP -> EXP_LOGICA .)
    END             reduce using rule 50 (EXP -> EXP_LOGICA .)
    ELSE            reduce using rule 50 (EXP -> EXP_LOGICA .)


state 108

    (57) EXP_MAT -> ( . PARAMETRO OP_MAT EXP_MAT )
    (52) EXP_LOGICA -> ( . PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    PARAMETRO                      shift and go to state 84
    PARAM_LOGICO                   shift and go to state 74
    OP_COMP                        shift and go to state 35

state 109

    (72) NOME -> . ID NOME .

    ATRIBUICAO      reduce using rule 72 (NOME -> . ID NOME .)
    +               reduce using rule 72 (NOME -> . ID NOME .)
    -               reduce using rule 72 (NOME -> . ID NOME .)
    *               reduce using rule 72 (NOME -> . ID NOME .)
    /               reduce using rule 72 (NOME -> . ID NOME .)
    ;               reduce using rule 72 (NOME -> . ID NOME .)
    END             reduce using rule 72 (NOME -> . ID NOME .)
    ELSE            reduce using rule 72 (NOME -> . ID NOME .)
    ]               reduce using rule 72 (NOME -> . ID NOME .)
    ,               reduce using rule 72 (NOME -> . ID NOME .)
    )               reduce using rule 72 (NOME -> . ID NOME .)
    AND             reduce using rule 72 (NOME -> . ID NOME .)
    OR              reduce using rule 72 (NOME -> . ID NOME .)
    DO              reduce using rule 72 (NOME -> . ID NOME .)
    THEN            reduce using rule 72 (NOME -> . ID NOME .)
    TO              reduce using rule 72 (NOME -> . ID NOME .)


state 110

    (73) NOME -> [ PARAMETRO ] .

    ATRIBUICAO      reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    +               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    -               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    *               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    /               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    ;               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    END             reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    ELSE            reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    ]               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    ,               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    )               reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    AND             reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    OR              reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    DO              reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    THEN            reduce using rule 73 (NOME -> [ PARAMETRO ] .)
    TO              reduce using rule 73 (NOME -> [ PARAMETRO ] .)


state 111

    (74) NOME -> ( LISTA_PARAM ) .

    ATRIBUICAO      reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    +               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    -               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    *               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    /               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    ;               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    END             reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    ELSE            reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    ]               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    ,               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    )               reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    AND             reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    OR              reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    DO              reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    THEN            reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)
    TO              reduce using rule 74 (NOME -> ( LISTA_PARAM ) .)


state 112

    (76) LISTA_PARAM -> PARAMETRO , . LISTA_PARAM
    (76) LISTA_PARAM -> . PARAMETRO , LISTA_PARAM
    (77) LISTA_PARAM -> . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 69
    LISTA_PARAM                    shift and go to state 132

state 113

    (38) COMANDO -> WHILE EXP_LOGICA DO bloco_com .

    ;               reduce using rule 38 (COMANDO -> WHILE EXP_LOGICA DO bloco_com .)
    END             reduce using rule 38 (COMANDO -> WHILE EXP_LOGICA DO bloco_com .)
    ELSE            reduce using rule 38 (COMANDO -> WHILE EXP_LOGICA DO bloco_com .)


state 114

    (43) bloco_com -> BLOCO .

    ;               reduce using rule 43 (bloco_com -> BLOCO .)
    END             reduce using rule 43 (bloco_com -> BLOCO .)
    ELSE            reduce using rule 43 (bloco_com -> BLOCO .)


state 115

    (44) bloco_com -> COMANDO .

    ;               reduce using rule 44 (bloco_com -> COMANDO .)
    END             reduce using rule 44 (bloco_com -> COMANDO .)
    ELSE            reduce using rule 44 (bloco_com -> COMANDO .)


state 116

    (51) EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .

    DO              reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    THEN            reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    ;               reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    END             reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    ELSE            reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)
    )               reduce using rule 51 (EXP_LOGICA -> PARAM_LOGICO OP_LOGICO EXP_LOGICA .)


state 117

    (52) EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO . EXP_LOGICA )
    (51) EXP_LOGICA -> . PARAM_LOGICO OP_LOGICO EXP_LOGICA
    (52) EXP_LOGICA -> . ( PARAM_LOGICO OP_LOGICO EXP_LOGICA )
    (53) EXP_LOGICA -> . PARAM_LOGICO
    (54) PARAM_LOGICO -> . OP_COMP PARAMETRO
    (55) PARAM_LOGICO -> .
    (61) OP_COMP -> . >
    (62) OP_COMP -> . <
    (63) OP_COMP -> . COMPARACAO

    (               shift and go to state 34
    AND             reduce using rule 55 (PARAM_LOGICO -> .)
    OR              reduce using rule 55 (PARAM_LOGICO -> .)
    )               reduce using rule 55 (PARAM_LOGICO -> .)
    >               shift and go to state 36
    <               shift and go to state 37
    COMPARACAO      shift and go to state 38

    PARAM_LOGICO                   shift and go to state 33
    EXP_LOGICA                     shift and go to state 133
    OP_COMP                        shift and go to state 35

state 118

    (39) COMANDO -> IF EXP_LOGICA THEN bloco_com . alternativa_else
    (46) alternativa_else -> . ELSE bloco_com
    (47) alternativa_else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 135
    ;               reduce using rule 47 (alternativa_else -> .)
    END             reduce using rule 47 (alternativa_else -> .)

  ! ELSE            [ reduce using rule 47 (alternativa_else -> .) ]

    alternativa_else               shift and go to state 134

state 119

    (40) COMANDO -> FOR FOR_PARAMS DO bloco_com .

    ;               reduce using rule 40 (COMANDO -> FOR FOR_PARAMS DO bloco_com .)
    END             reduce using rule 40 (COMANDO -> FOR FOR_PARAMS DO bloco_com .)
    ELSE            reduce using rule 40 (COMANDO -> FOR FOR_PARAMS DO bloco_com .)


state 120

    (48) FOR_PARAMS -> ID ATRIBUICAO PARAMETRO . TO PARAMETRO

    TO              shift and go to state 136


state 121

    (56) EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .

    ;               reduce using rule 56 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    END             reduce using rule 56 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    ELSE            reduce using rule 56 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    )               reduce using rule 56 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)


state 122

    (57) EXP_MAT -> ( PARAMETRO OP_MAT . EXP_MAT )
    (56) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (57) EXP_MAT -> . ( PARAMETRO OP_MAT EXP_MAT )
    (58) EXP_MAT -> . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    (               shift and go to state 46
    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 45
    EXP_MAT                        shift and go to state 137

state 123

    (32) ROTINA -> FUNCTION ID PARAM_ROTINA . : TIPO_DADO BLOCO_ROTINA

    :               shift and go to state 138


state 124

    (35) PARAM_ROTINA -> ( . CAMPOS )
    (24) CAMPOS -> . CAMPO LISTA_CAMPOS
    (27) CAMPO -> . ID LISTA_ID : TIPO_DADO

    ID              shift and go to state 59

    CAMPOS                         shift and go to state 139
    CAMPO                          shift and go to state 58

state 125

    (33) ROTINA -> PROCEDURE ID PARAM_ROTINA . BLOCO_ROTINA
    (36) BLOCO_ROTINA -> . DEF_VAR BLOCO
    (21) DEF_VAR -> .
    (22) DEF_VAR -> . VARIAVEL DEF_VAR
    (23) VARIAVEL -> . VAR CAMPOS ;

    BEGIN           reduce using rule 21 (DEF_VAR -> .)
    VAR             shift and go to state 22

    BLOCO_ROTINA                   shift and go to state 140
    DEF_VAR                        shift and go to state 141
    VARIAVEL                       shift and go to state 21

state 126

    (26) LISTA_CAMPOS -> ; CAMPO . LISTA_CAMPOS
    (25) LISTA_CAMPOS -> .
    (26) LISTA_CAMPOS -> . ; CAMPO LISTA_CAMPOS

  ! shift/reduce conflict for ; resolved as shift
    END             reduce using rule 25 (LISTA_CAMPOS -> .)
    )               reduce using rule 25 (LISTA_CAMPOS -> .)
    ;               shift and go to state 92

  ! ;               [ reduce using rule 25 (LISTA_CAMPOS -> .) ]

    LISTA_CAMPOS                   shift and go to state 142

state 127

    (27) CAMPO -> ID LISTA_ID : . TIPO_DADO
    (14) TIPO_DADO -> . INTEGER
    (15) TIPO_DADO -> . REAL
    (16) TIPO_DADO -> . CHAR
    (17) TIPO_DADO -> . BOOLEAN
    (18) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (19) TIPO_DADO -> . RECORD CAMPOS END
    (20) TIPO_DADO -> . ID

    INTEGER         shift and go to state 97
    REAL            shift and go to state 98
    CHAR            shift and go to state 99
    BOOLEAN         shift and go to state 100
    ARRAY           shift and go to state 101
    RECORD          shift and go to state 102
    ID              shift and go to state 95

    TIPO_DADO                      shift and go to state 143

state 128

    (29) LISTA_ID -> , ID . LISTA_ID
    (28) LISTA_ID -> .
    (29) LISTA_ID -> . , ID LISTA_ID

    :               reduce using rule 28 (LISTA_ID -> .)
    ,               shift and go to state 94

    LISTA_ID                       shift and go to state 144

state 129

    (13) TIPO -> TYPE ID = TIPO_DADO ; .

    TYPE            reduce using rule 13 (TIPO -> TYPE ID = TIPO_DADO ; .)
    VAR             reduce using rule 13 (TIPO -> TYPE ID = TIPO_DADO ; .)
    FUNCTION        reduce using rule 13 (TIPO -> TYPE ID = TIPO_DADO ; .)
    PROCEDURE       reduce using rule 13 (TIPO -> TYPE ID = TIPO_DADO ; .)
    BEGIN           reduce using rule 13 (TIPO -> TYPE ID = TIPO_DADO ; .)


state 130

    (18) TIPO_DADO -> ARRAY [ . NUMERO ] OF TIPO_DADO

    NUMERO          shift and go to state 145


state 131

    (19) TIPO_DADO -> RECORD CAMPOS . END

    END             shift and go to state 146


state 132

    (76) LISTA_PARAM -> PARAMETRO , LISTA_PARAM .

    )               reduce using rule 76 (LISTA_PARAM -> PARAMETRO , LISTA_PARAM .)


state 133

    (52) EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA . )

    )               shift and go to state 147


state 134

    (39) COMANDO -> IF EXP_LOGICA THEN bloco_com alternativa_else .

    ;               reduce using rule 39 (COMANDO -> IF EXP_LOGICA THEN bloco_com alternativa_else .)
    END             reduce using rule 39 (COMANDO -> IF EXP_LOGICA THEN bloco_com alternativa_else .)
    ELSE            reduce using rule 39 (COMANDO -> IF EXP_LOGICA THEN bloco_com alternativa_else .)


state 135

    (46) alternativa_else -> ELSE . bloco_com
    (43) bloco_com -> . BLOCO
    (44) bloco_com -> . COMANDO
    (2) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (37) COMANDO -> . ID NOME atribuicao
    (38) COMANDO -> . WHILE EXP_LOGICA DO bloco_com
    (39) COMANDO -> . IF EXP_LOGICA THEN bloco_com alternativa_else
    (40) COMANDO -> . FOR FOR_PARAMS DO bloco_com
    (41) COMANDO -> . WRITE CONST_VALOR
    (42) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 7
    ID              shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FOR             shift and go to state 17
    WRITE           shift and go to state 18
    READ            shift and go to state 19

    bloco_com                      shift and go to state 148
    BLOCO                          shift and go to state 114
    COMANDO                        shift and go to state 115

state 136

    (48) FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO . PARAMETRO
    (68) PARAMETRO -> . ID NOME
    (69) PARAMETRO -> . NUMERO
    (70) PARAMETRO -> . FALSE
    (71) PARAMETRO -> . TRUE

    ID              shift and go to state 47
    NUMERO          shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50

    PARAMETRO                      shift and go to state 149

state 137

    (57) EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT . )

    )               shift and go to state 150


state 138

    (32) ROTINA -> FUNCTION ID PARAM_ROTINA : . TIPO_DADO BLOCO_ROTINA
    (14) TIPO_DADO -> . INTEGER
    (15) TIPO_DADO -> . REAL
    (16) TIPO_DADO -> . CHAR
    (17) TIPO_DADO -> . BOOLEAN
    (18) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (19) TIPO_DADO -> . RECORD CAMPOS END
    (20) TIPO_DADO -> . ID

    INTEGER         shift and go to state 97
    REAL            shift and go to state 98
    CHAR            shift and go to state 99
    BOOLEAN         shift and go to state 100
    ARRAY           shift and go to state 101
    RECORD          shift and go to state 102
    ID              shift and go to state 95

    TIPO_DADO                      shift and go to state 151

state 139

    (35) PARAM_ROTINA -> ( CAMPOS . )

    )               shift and go to state 152


state 140

    (33) ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .

    FUNCTION        reduce using rule 33 (ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .)
    PROCEDURE       reduce using rule 33 (ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .)
    BEGIN           reduce using rule 33 (ROTINA -> PROCEDURE ID PARAM_ROTINA BLOCO_ROTINA .)


state 141

    (36) BLOCO_ROTINA -> DEF_VAR . BLOCO
    (2) BLOCO -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 7

    BLOCO                          shift and go to state 153

state 142

    (26) LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .

    ;               reduce using rule 26 (LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .)
    END             reduce using rule 26 (LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .)
    )               reduce using rule 26 (LISTA_CAMPOS -> ; CAMPO LISTA_CAMPOS .)


state 143

    (27) CAMPO -> ID LISTA_ID : TIPO_DADO .

    ;               reduce using rule 27 (CAMPO -> ID LISTA_ID : TIPO_DADO .)
    END             reduce using rule 27 (CAMPO -> ID LISTA_ID : TIPO_DADO .)
    )               reduce using rule 27 (CAMPO -> ID LISTA_ID : TIPO_DADO .)


state 144

    (29) LISTA_ID -> , ID LISTA_ID .

    :               reduce using rule 29 (LISTA_ID -> , ID LISTA_ID .)


state 145

    (18) TIPO_DADO -> ARRAY [ NUMERO . ] OF TIPO_DADO

    ]               shift and go to state 154


state 146

    (19) TIPO_DADO -> RECORD CAMPOS END .

    ;               reduce using rule 19 (TIPO_DADO -> RECORD CAMPOS END .)
    END             reduce using rule 19 (TIPO_DADO -> RECORD CAMPOS END .)
    )               reduce using rule 19 (TIPO_DADO -> RECORD CAMPOS END .)
    VAR             reduce using rule 19 (TIPO_DADO -> RECORD CAMPOS END .)
    BEGIN           reduce using rule 19 (TIPO_DADO -> RECORD CAMPOS END .)


state 147

    (52) EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .

    DO              reduce using rule 52 (EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .)
    THEN            reduce using rule 52 (EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .)
    ;               reduce using rule 52 (EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .)
    END             reduce using rule 52 (EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .)
    ELSE            reduce using rule 52 (EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .)
    )               reduce using rule 52 (EXP_LOGICA -> ( PARAM_LOGICO OP_LOGICO EXP_LOGICA ) .)


state 148

    (46) alternativa_else -> ELSE bloco_com .

    ;               reduce using rule 46 (alternativa_else -> ELSE bloco_com .)
    END             reduce using rule 46 (alternativa_else -> ELSE bloco_com .)
    ELSE            reduce using rule 46 (alternativa_else -> ELSE bloco_com .)


state 149

    (48) FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO PARAMETRO .

    DO              reduce using rule 48 (FOR_PARAMS -> ID ATRIBUICAO PARAMETRO TO PARAMETRO .)


state 150

    (57) EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT ) .

    ;               reduce using rule 57 (EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT ) .)
    END             reduce using rule 57 (EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT ) .)
    ELSE            reduce using rule 57 (EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT ) .)
    )               reduce using rule 57 (EXP_MAT -> ( PARAMETRO OP_MAT EXP_MAT ) .)


state 151

    (32) ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO . BLOCO_ROTINA
    (36) BLOCO_ROTINA -> . DEF_VAR BLOCO
    (21) DEF_VAR -> .
    (22) DEF_VAR -> . VARIAVEL DEF_VAR
    (23) VARIAVEL -> . VAR CAMPOS ;

    BEGIN           reduce using rule 21 (DEF_VAR -> .)
    VAR             shift and go to state 22

    BLOCO_ROTINA                   shift and go to state 155
    DEF_VAR                        shift and go to state 141
    VARIAVEL                       shift and go to state 21

state 152

    (35) PARAM_ROTINA -> ( CAMPOS ) .

    :               reduce using rule 35 (PARAM_ROTINA -> ( CAMPOS ) .)
    VAR             reduce using rule 35 (PARAM_ROTINA -> ( CAMPOS ) .)
    BEGIN           reduce using rule 35 (PARAM_ROTINA -> ( CAMPOS ) .)


state 153

    (36) BLOCO_ROTINA -> DEF_VAR BLOCO .

    FUNCTION        reduce using rule 36 (BLOCO_ROTINA -> DEF_VAR BLOCO .)
    PROCEDURE       reduce using rule 36 (BLOCO_ROTINA -> DEF_VAR BLOCO .)
    BEGIN           reduce using rule 36 (BLOCO_ROTINA -> DEF_VAR BLOCO .)


state 154

    (18) TIPO_DADO -> ARRAY [ NUMERO ] . OF TIPO_DADO

    OF              shift and go to state 156


state 155

    (32) ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .

    FUNCTION        reduce using rule 32 (ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .)
    PROCEDURE       reduce using rule 32 (ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .)
    BEGIN           reduce using rule 32 (ROTINA -> FUNCTION ID PARAM_ROTINA : TIPO_DADO BLOCO_ROTINA .)


state 156

    (18) TIPO_DADO -> ARRAY [ NUMERO ] OF . TIPO_DADO
    (14) TIPO_DADO -> . INTEGER
    (15) TIPO_DADO -> . REAL
    (16) TIPO_DADO -> . CHAR
    (17) TIPO_DADO -> . BOOLEAN
    (18) TIPO_DADO -> . ARRAY [ NUMERO ] OF TIPO_DADO
    (19) TIPO_DADO -> . RECORD CAMPOS END
    (20) TIPO_DADO -> . ID

    INTEGER         shift and go to state 97
    REAL            shift and go to state 98
    CHAR            shift and go to state 99
    BOOLEAN         shift and go to state 100
    ARRAY           shift and go to state 101
    RECORD          shift and go to state 102
    ID              shift and go to state 95

    TIPO_DADO                      shift and go to state 157

state 157

    (18) TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .

    ;               reduce using rule 18 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    END             reduce using rule 18 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    )               reduce using rule 18 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    VAR             reduce using rule 18 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)
    BEGIN           reduce using rule 18 (TIPO_DADO -> ARRAY [ NUMERO ] OF TIPO_DADO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 58 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 118 resolved as shift
WARNING: shift/reduce conflict for ; in state 126 resolved as shift
